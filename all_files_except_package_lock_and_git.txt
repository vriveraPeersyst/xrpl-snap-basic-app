--- File: ./tailwind.config.js ---
module.exports = {
  content: [
    './src/**/*.{js,jsx,ts,tsx}',
    './public/index.html',
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}



--- File: ./extract_all_files.sh ---
#!/bin/bash

# Nombre del archivo donde se guardarÃ¡ el contenido
output_file="all_files_except_package_lock_and_git.txt"

# Crear o vaciar el archivo de salida
> "$output_file"

# Buscar archivos, excluyendo los de .git y package-lock.json
find . -type f ! -name 'package-lock.json' ! -path '*/.git/*' ! -name "$output_file" | while read -r file; do
    echo "--- File: $file ---" >> "$output_file"
    # Agregar el contenido solo si es texto
    if file "$file" | grep -q 'text'; then
        cat "$file" >> "$output_file"
    else
        echo "[Non-text file skipped]" >> "$output_file"
    fi
    echo -e "\n" >> "$output_file"
done

echo "Contenido de los archivos guardado en $output_file"


--- File: ./README.md ---

# XRPL Snap Basic App

This project demonstrates how to integrate MetaMask Snaps with the XRP Ledger (XRPL) using the XRPL Snap. The app allows users to connect to MetaMask, fetch their XRPL account, and set up a trustline for a token on the XRP Ledger.

## Features

- Connect to MetaMask and request the XRPL Snap.
- Dynamically fetch the connected XRPL account.
- Set up a trustline for a specific token issuer and currency.
- Display status and error messages for the user.

## Installation

### Prerequisites

Before running this project, make sure you have the following installed:

- [Node.js](https://nodejs.org/)
- [MetaMask](https://metamask.io/) installed in your browser
- [Git](https://git-scm.com/)

### Steps

1. Clone the repository:

   ```bash
   git clone https://github.com/your-username/xrpl-snap-basic-app.git
   ```

2. Navigate into the project directory:

   ```bash
   cd xrpl-snap-basic-app
   ```

3. Install the dependencies:

   ```bash
   npm install
   ```

4. Start the development server:

   ```bash
   npm start
   ```

5. Open your browser and connect to the MetaMask wallet.

## Usage

1. Once the application is running, click the **Connect MetaMask** button to connect your wallet.
2. After connecting MetaMask, your XRPL account will be fetched automatically.
3. Enter the token issuer address, token currency (e.g., USD), and limit amount to set up a trustline.
4. Click **Set Trustline** to establish a trustline on the XRP Ledger.

## Deployment

To deploy the app to GitHub Pages:

1. Install GitHub Pages as a dev dependency:

   ```bash
   npm install gh-pages --save-dev
   ```

2. Add the following scripts to your `package.json` file:

   ```json
   "scripts": {
     "predeploy": "npm run build",
     "deploy": "gh-pages -d build"
   }
   ```

3. Deploy the app:

   ```bash
   npm run deploy
   ```

4. Your app will be live at: `https://your-username.github.io/xrpl-snap-basic-app/`.

## License

This project is open-source and available under the [MIT License](LICENSE).

--- File: ./public/favicon.ico ---
[Non-text file skipped]


--- File: ./public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>XRPL Snap Trustline</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>


--- File: ./public/xrplsnaplogo1.png ---
[Non-text file skipped]


--- File: ./public/manifest.json ---
[Non-text file skipped]


--- File: ./.gitignore ---
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*


--- File: ./package.json ---
[Non-text file skipped]


--- File: ./tsconfig.json ---
[Non-text file skipped]


--- File: ./src/index.tsx ---
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


--- File: ./src/App.tsx ---
import React, { useState } from 'react';
import ConnectWallet from './components/ConnectWallet';
import SetTrustline from './components/SetTrustline';
import CancelTrustline from './components/CancelTrustline';
import XRPLTransactions from './components/XRPLTransactions';
import xrplLogo from './assets/xrplsnaplogo1.png';

const App: React.FC = () => {
  const [connected, setConnected] = useState(false);
  const [xrplAccount, setXrplAccount] = useState<string | null>(null);
  const [selectedOption, setSelectedOption] = useState<string | null>(null);

  const handleConnect = (xrplAccount: string) => {
    setXrplAccount(xrplAccount);
    setConnected(true);
  };

  const renderContent = () => {
    if (!connected) {
      return <ConnectWallet onConnect={handleConnect} />;
    }

    if (selectedOption === 'SetTrustline') {
      return <SetTrustline />;
    }

    if (selectedOption === 'CancelTrustline') {
      return <CancelTrustline xrplAccount={xrplAccount!} />;
    }

    if (selectedOption === 'XRPLTransactions') {
      return <XRPLTransactions xrplAccount={xrplAccount!} />;
    }

    return (
      <div className="text-center">
        <p className="mb-4">Connected XRPL Account: {xrplAccount}</p>
        <h2 className="text-2xl font-bold mb-4">Select an Option</h2>
        <button
          onClick={() => setSelectedOption('SetTrustline')}
          className="w-full py-3 px-6 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition duration-300 ease-in-out transform hover:scale-105 mb-4"
        >
          Set Trustline
        </button>
        <button
          onClick={() => setSelectedOption('CancelTrustline')}
          className="w-full py-3 px-6 bg-red-500 text-white rounded-lg hover:bg-red-600 transition duration-300 ease-in-out transform hover:scale-105 mb-4"
        >
          Cancel Trustline
        </button>
        <button
          onClick={() => setSelectedOption('XRPLTransactions')}
          className="w-full py-3 px-6 bg-green-500 text-white rounded-lg hover:bg-green-600 transition duration-300 ease-in-out transform hover:scale-105"
        >
          XRPL Transactions
        </button>
      </div>
    );
  };

  return (
    <div className="relative flex flex-col items-center justify-center min-h-screen bg-white p-4">
      {/* Logo in top left corner */}
      <div className="absolute top-[3%] left-[3%]">
        <a href="http://localhost:3000">
          <div className="w-20 h-20 rounded-full overflow-hidden border-2 border-gray-300">
            <img src={xrplLogo} alt="XRPL Snap Logo" className="w-full h-full object-cover" />
          </div>
        </a>
      </div>
  
      {/* Main content */}
      {renderContent()}
    </div>
  );
};

export default App;

--- File: ./src/App.test.tsx ---
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


--- File: ./src/App.css ---
.App {
  text-align: center;
  background: linear-gradient(45deg, #ff6b6b, #4ecdc4, #45b7d1);
  min-height: 100vh;
  color: #ffffff;
  display: flex;
  justify-content: center;
  align-items: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
  filter: drop-shadow(0 0 10px rgba(255, 255, 255, 0.7));
  margin: 0 auto;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  backdrop-filter: blur(5px);
  background-color: rgba(255, 255, 255, 0.1);
  border-radius: 20px;
  padding: 2rem;
  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
  width: 100%;
  max-width: 800px;
  margin: 0 auto;
}

.App-link {
  color: #ffd700;
  text-decoration: none;
  transition: color 0.3s ease;
  display: block;
  text-align: center;
}

.App-link:hover {
  color: #ff9900;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

button {
  background-color: #4ecdc4;
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 5px;
  font-size: 1rem;
  cursor: pointer;
  transition: background-color 0.3s ease;
  display: block;
  margin: 10px auto;
}

button:hover {
  background-color: #45b7d1;
}


--- File: ./src/index.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Custom Global Styles */
body {
  @apply font-sans; /* Uses Tailwind's default sans-serif */
}

code {
  @apply font-mono; /* Tailwind's monospace font */
}


--- File: ./src/setupTests.ts ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


--- File: ./src/reportWebVitals.ts ---
import { ReportHandler } from 'web-vitals';

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


--- File: ./src/components/ConnectWallet.tsx ---
import React, { useState } from 'react';
import type { MetaMaskInpageProvider, RequestArguments } from '@metamask/providers';

// Hardcoded config object (replace with dynamic values as necessary)
const config = {
  snapOrigin: 'npm:xrpl-snap', // Or your local snap URL
};

// MetaMaskRepository Class (defined locally within the same file)
class MetaMaskRepository {
  public provider?: MetaMaskInpageProvider | null;

  public async onInit() {
    this.provider = await this.getProvider();
    if (!this.provider) {
      throw new Error('MetaMask provider not found or Snaps not supported');
    }
  }

  public async requestSnap() {
    await this.request({
      method: 'wallet_requestSnaps',
      params: {
        [config.snapOrigin]: {}, // Change to the correct origin (local or npm)
      },
    });
  }

  public async getWallet(): Promise<{ account: string } | null> {
    const result = await this.invokeSnap({
      method: 'xrpl_getAccount',
      params: undefined,
    });

    if (result && typeof result === 'object' && 'account' in result) {
      return result as { account: string };
    }

    return null; // If the result is invalid or doesn't have an account
  }

  public async getAccountInfo(account: string): Promise<any & { signer_lists?: any[] }> {
    const { result } = (await this.invokeSnap({
      method: 'xrpl_request',
      params: { command: 'account_info', account },
    })) as { result: { account_data?: any } };

    if (result?.account_data) {
      return result.account_data;
    }
    throw new Error('Account not found');
  }

  private async invokeSnap({ method, params }: { method: string; params: any }) {
    return this.request({
      method: 'wallet_invokeSnap',
      params: {
        snapId: config.snapOrigin,
        request: {
          method,
          params,
        },
      },
    });
  }

  private async getProvider() {
    if (typeof window === 'undefined') return null;
    if (await this.hasSnapsSupport()) return window.ethereum;
    return null;
  }

  private async hasSnapsSupport(provider: MetaMaskInpageProvider = window.ethereum): Promise<boolean> {
    try {
      await provider.request({
        method: 'wallet_getSnaps',
      });
      return true;
    } catch {
      return false;
    }
  }

  private async request({ method, params }: RequestArguments) {
    if (!this.provider) throw new Error('MetaMask provider not initialized');
    return this.provider.request({ method, params });
  }
}

interface ConnectWalletProps {
  onConnect: (xrplAccount: string) => void;
}

const ConnectWallet: React.FC<ConnectWalletProps> = ({ onConnect }) => {
  const [connected, setConnected] = useState(false);
  const [xrplAccount, setXrplAccount] = useState<string | null>(null);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);

  const metaMaskRepository = new MetaMaskRepository();

  const connectWallet = async () => {
    try {
      await metaMaskRepository.onInit();

      const provider = metaMaskRepository.provider;
      if (provider) {
        const accounts = (await provider.request({
          method: 'eth_requestAccounts',
        })) as string[];

        if (accounts && accounts.length > 0) {
          await metaMaskRepository.requestSnap();

          const xrplWallet = await metaMaskRepository.getWallet();
          if (xrplWallet && xrplWallet.account) {
            setXrplAccount(xrplWallet.account);
            setConnected(true);
            onConnect(xrplWallet.account); // Pass XRPL account to parent component
          } else {
            setErrorMessage('Failed to retrieve XRPL account.');
          }
        } else {
          setErrorMessage('No EVM accounts found');
        }
      } else {
        setErrorMessage('MetaMask provider not initialized');
      }
    } catch (error) {
      console.error('Error connecting to MetaMask:', error);
      setErrorMessage('Error connecting to MetaMask');
    }
  };

  return (
    <div>
      {!connected ? (
        <button
          onClick={connectWallet}
          className="w-full bg-blue-500 text-white py-3 px-6 rounded-full hover:bg-blue-600 flex items-center justify-center space-x-2 transition duration-300 ease-in-out transform hover:scale-105"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.111 16.404a5.5 5.5 0 017.778 0M12 20h.01m-7.08-7.071c3.904-3.905 10.236-3.905 14.14 0M1.394 9.393c5.857-5.857 15.355-5.857 21.213 0" />
          </svg>
          <span className="text-lg font-semibold">Connect XRPL MetaMask Snap</span>
        </button>
      ) : (
        <div className="text-center">
          <p>Connected XRPL Account: {xrplAccount}</p>
        </div>
      )}
      {errorMessage && <p className="text-red-500 mt-2">{errorMessage}</p>}
    </div>
  );
};

export default ConnectWallet;

--- File: ./src/components/XRPLTransactions.tsx ---
import React, { useState, useRef } from 'react';
import { MetaMaskInpageProvider } from '@metamask/providers';

declare global {
  interface Window {
    ethereum: MetaMaskInpageProvider;
  }
}

interface XRPLTransactionsProps {
  xrplAccount: string;
}

const transactionTypes = [
  'AccountSet', 'AccountDelete', 'AMMBid', 'AMMCreate', 'AMMDelete', 'AMMDeposit', 'AMMVote', 'AMMWithdraw',
  'CheckCancel', 'CheckCash', 'CheckCreate', 'Clawback', 'DepositPreauth', 'DIDDelete', 'DIDSet',
  'EscrowCancel', 'EscrowCreate', 'EscrowFinish', 'NFTokenAcceptOffer', 'NFTokenBurn', 'NFTokenCancelOffer',
  'NFTokenCreateOffer', 'NFTokenMint', 'OfferCancel', 'OfferCreate', 'OracleDelete', 'OracleSet',
  'Payment', 'PaymentChannelClaim', 'PaymentChannelCreate', 'PaymentChannelFund', 'SetRegularKey',
  'SignerListSet', 'TicketCreate', 'TrustSet', 'XChainAccountCreateCommit', 'XChainAddAccountCreateAttestation',
  'XChainAddClaimAttestation', 'XChainClaim', 'XChainCommit', 'XChainCreateBridge'
];

// Modal Component
const SuccessModal: React.FC<{ onClose: () => void; message: string }> = ({ onClose, message }) => (
  <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div className="bg-white p-6 rounded-lg shadow-lg max-w-sm w-full text-center">
      <div className="text-green-500 mb-4">
        <svg className="mx-auto w-12 h-12" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
        </svg>
      </div>
      <h2 className="text-lg font-bold mb-2">Transaction Successful!</h2>
    
      <button
        onClick={onClose}
        className="mt-4 py-2 px-4 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition duration-300"
      >
        Close
      </button>
    </div>
  </div>
);

const XRPLTransactions: React.FC<XRPLTransactionsProps> = ({ xrplAccount }) => {
  const [selectedType, setSelectedType] = useState('');
  const [transactionJSON, setTransactionJSON] = useState('');
  const [status, setStatus] = useState<string | null>(null);
  const [showModal, setShowModal] = useState(false); // State to control the modal
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const content = e.target?.result as string;
        try {
          JSON.parse(content); // Validate JSON
          setTransactionJSON(content);
        } catch (error) {
          setStatus('Invalid JSON file. Please upload a valid JSON.');
        }
      };
      reader.readAsText(file);
    }
  };

  const executeTransaction = async () => {
    try {
      const provider = window.ethereum;
      let parsedTransaction;

      try {
        parsedTransaction = JSON.parse(transactionJSON);
      } catch (error) {
        setStatus('Invalid JSON. Please check your input.');
        return;
      }

      // Ensure the Account field is set to the connected XRPL account
      parsedTransaction.Account = xrplAccount;

      const result = await provider.request({
        method: 'wallet_invokeSnap',
        params: {
          snapId: 'npm:xrpl-snap',
          request: {
            method: 'xrpl_signAndSubmit',
            params: parsedTransaction,
          },
        },
      });

      setStatus(`Transaction executed successfully: ${JSON.stringify(result)}`);
      setShowModal(true); // Show modal on success
    } catch (error) {
      console.error('Error executing transaction:', error);
      setStatus(`Error executing transaction: ${error instanceof Error ? error.message : String(error)}`);
    }
  };

  return (
    <div className="w-full max-w-2xl mx-auto">
      {/* Modal for Success */}
      {showModal && <SuccessModal onClose={() => setShowModal(false)} message={status || ''} />}

      {/* XRPL connected address display */}
      <div className="mb-4 text-center">
        <p className="text-lg font-semibold text-gray-700">
          Connected XRPL Account: <span className="text-blue-600">{xrplAccount}</span>
        </p>
      </div>

      <h3 className="text-2xl font-bold mb-6 text-center">XRPL Transactions</h3>
      <div className="mb-6">
        <label className="block text-gray-700 mb-2">Transaction Type</label>
        <select
          value={selectedType}
          onChange={(e) => setSelectedType(e.target.value)}
          className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
          <option value="">Select a transaction type</option>
          {transactionTypes.map((type) => (
            <option key={type} value={type}>{type}</option>
          ))}
        </select>
      </div>
      {selectedType && (
        <div className="mb-6">
          <h4 className="text-lg font-semibold mb-2">Transaction JSON</h4>
          <textarea
            value={transactionJSON}
            onChange={(e) => setTransactionJSON(e.target.value)}
            className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 mb-2"
            placeholder="Paste your transaction JSON here"
            rows={10}
          />
          <div className="flex justify-between items-center">
            <button
              onClick={() => fileInputRef.current?.click()}
              className="py-2 px-4 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition duration-300 ease-in-out"
            >
              Upload JSON File
            </button>
            <input
              type="file"
              ref={fileInputRef}
              onChange={handleFileUpload}
              accept=".json"
              className="hidden"
            />
          </div>
        </div>
      )}
      <button
        onClick={executeTransaction}
        disabled={!selectedType || !transactionJSON}
        className="w-full py-3 px-6 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition duration-300 ease-in-out disabled:opacity-50"
      >
        Execute Transaction
      </button>
      {status && <p className="mt-4 text-center text-red-500">{status}</p>}
    </div>
  );
};

export default XRPLTransactions;


--- File: ./src/components/SetTrustline.tsx ---
import React, { useState, useEffect } from 'react';
import { MetaMaskInpageProvider } from '@metamask/providers';

declare global {
  interface Window {
    ethereum: MetaMaskInpageProvider;
  }
}

// MetaMaskRepository Class (simulating the getWallet method)
class MetaMaskRepository {
  public async getWallet(): Promise<{ account: string } | null> {
    if (!window.ethereum) {
      throw new Error('MetaMask is not available');
    }

    const provider = window.ethereum;

    const result = await provider.request({
      method: 'wallet_invokeSnap',
      params: {
        snapId: 'npm:/xrpl-snap',
        request: {
          method: 'xrpl_getAccount',
          params: undefined,
        },
      },
    });

    if (result && typeof result === 'object' && 'account' in result) {
      return result as { account: string };
    }

    return null; // If the result is invalid or doesn't have an account
  }
}

// Utility function to convert currency string to 40-character hex if needed
const convertCurrencyToHex = (currency: string): string => {
    // Check if it's already a valid 40-character hex string
    if (/^[A-Fa-f0-9]{40}$/.test(currency)) {
      return currency;
    }
  
    // If the currency code is exactly 3 characters, keep it as-is
    if (currency.length === 3 && /^[A-Za-z0-9?!@#$%^&*<>()[\]{}|]+$/.test(currency)) {
      return currency; // Return the original 3-character code without converting to hex
    }
  
    // Convert non-standard currency codes to hex
    const currencyHex = Buffer.from(currency, 'utf8').toString('hex').toUpperCase();
  
    // Pad the hex value to 40 characters if necessary (right pad with 0s)
    const paddedCurrencyHex = currencyHex.padEnd(40, '0');
  
    return paddedCurrencyHex;
  };
  

const SetTrustline: React.FC = () => {
  const [rAddress, setRAddress] = useState('');
  const [limitAmount, setLimitAmount] = useState('1000');
  const [tokenCurrency, setTokenCurrency] = useState('TOKEN');
  const [status, setStatus] = useState<string | null>(null);
  const [xrplAccount, setXrplAccount] = useState<string | null>(null);

  const metaMaskRepository = new MetaMaskRepository();

  // Function to fetch XRPL Account using MetaMask Snap
  const fetchXRPLAccount = async () => {
    try {
      const wallet = await metaMaskRepository.getWallet();
      if (wallet && wallet.account) {
        setXrplAccount(wallet.account);
      } else {
        setStatus('Failed to fetch XRPL account.');
      }
    } catch (error) {
      console.error('Error fetching XRPL account:', error);
      setStatus('Error fetching XRPL account.');
    }
  };

  const setupTrustline = async () => {
    if (!xrplAccount) {
      setStatus('XRPL account is not available.');
      return;
    }

    try {
      if (window.ethereum) {
        const provider = window.ethereum;

        // Convert token currency to hex if needed
        const currencyHex = convertCurrencyToHex(tokenCurrency);

        const result = await provider.request({
          method: 'wallet_invokeSnap',
          params: {
            snapId: 'npm:/xrpl-snap',
            request: {
              method: 'xrpl_signAndSubmit',
              params: {
                TransactionType: 'TrustSet',
                Account: xrplAccount, // Dynamically set the connected userâs account
                LimitAmount: {
                  currency: currencyHex, // Currency code in hex
                  issuer: rAddress,
                  value: limitAmount,
                },
              },
            },
          },
        });

        setStatus(`Trustline set successfully: ${JSON.stringify(result)}`);
      } else {
        setStatus('MetaMask is not installed.');
      }
    } catch (error) {
      console.error('Error setting trustline:', error);
      setStatus('Error setting trustline.');
    }
  };

  // Fetch the XRPL account when the component mounts
  useEffect(() => {
    fetchXRPLAccount();
  });

  return (
    <div className="w-full max-w-2xl mx-auto">
      <h3 className="text-2xl font-bold mb-6 text-center">Set Up Trustline</h3>
      <div className="mb-6">
        <label className="block text-gray-700 mb-2">Token rAddress</label>
        <input
          type="text"
          value={rAddress}
          onChange={(e) => setRAddress(e.target.value)}
          className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          placeholder="Enter Token rAddress"
        />
      </div>
      <div className="mb-6">
        <label className="block text-gray-700 mb-2">Limit Amount</label>
        <input
          type="text"
          value={limitAmount}
          onChange={(e) => setLimitAmount(e.target.value)}
          className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          placeholder="Enter Limit Amount"
        />
      </div>
      <div className="mb-6">
        <label className="block text-gray-700 mb-2">Token Currency</label>
        <input
          type="text"
          value={tokenCurrency}
          onChange={(e) => setTokenCurrency(e.target.value)}
          className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          placeholder="Enter Token Currency"
        />
      </div>
      <button
        onClick={setupTrustline}
        className="w-full py-3 px-6 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition duration-300 ease-in-out"
      >
        Set Trustline
      </button>
      {status && <p className="mt-4 text-center text-red-500">{status}</p>}
    </div>
  );
};

export default SetTrustline;


--- File: ./src/components/CancelTrustline.tsx ---
import React, { useState } from 'react';
import { MetaMaskInpageProvider } from '@metamask/providers';

declare global {
  interface Window {
    ethereum: MetaMaskInpageProvider;
  }
}

interface CancelTrustlineProps {
  xrplAccount: string;
}

const CancelTrustline: React.FC<CancelTrustlineProps> = ({ xrplAccount }) => {
  const [rAddress, setRAddress] = useState('');
  const [tokenCurrency, setTokenCurrency] = useState('');
  const [status, setStatus] = useState<string | null>(null);

  const cancelTrustline = async () => {
    try {
      const provider = window.ethereum;

      const result = await provider.request({
        method: 'wallet_invokeSnap',
        params: {
          snapId: 'npm:@peersyst/xrpl-snap',
          request: {
            method: 'xrpl_signAndSubmit',
            params: {
              TransactionType: 'TrustSet',
              Account: xrplAccount,
              LimitAmount: {
                currency: tokenCurrency,
                issuer: rAddress,
                value: '0', // Always set to '0' for cancelling trustline
              },
            },
          },
        },
      });

      setStatus(`Trustline cancelled successfully: ${JSON.stringify(result)}`);
    } catch (error) {
      console.error('Error cancelling trustline:', error);
      setStatus('Error cancelling trustline.');
    }
  };

  return (
    <div className="w-full max-w-2xl mx-auto">
      <h3 className="text-2xl font-bold mb-6 text-center">Cancel Trustline</h3>
      <div className="mb-6">
        <label className="block text-gray-700 mb-2">Token rAddress</label>
        <input
          type="text"
          value={rAddress}
          onChange={(e) => setRAddress(e.target.value)}
          className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          placeholder="Enter Token rAddress"
        />
      </div>
      <div className="mb-6">
        <label className="block text-gray-700 mb-2">Token Currency</label>
        <input
          type="text"
          value={tokenCurrency}
          onChange={(e) => setTokenCurrency(e.target.value)}
          className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          placeholder="Enter Token Currency"
        />
      </div>
      <button
        onClick={cancelTrustline}
        className="w-full py-3 px-6 bg-red-500 text-white rounded-lg hover:bg-red-600 transition duration-300 ease-in-out"
      >
        Cancel Trustline
      </button>
      {status && <p className="mt-4 text-center text-red-500">{status}</p>}
    </div>
  );
};

export default CancelTrustline;

--- File: ./src/react-app-env.d.ts ---
/// <reference types="react-scripts" />


--- File: ./src/assets/xrplsnaplogo1.png ---
[Non-text file skipped]


--- File: ./src/logo.svg ---
[Non-text file skipped]


